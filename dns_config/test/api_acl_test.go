/*
DNS Configuration API

Testing AclAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dns_config_test

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/infobloxopen/bloxone-go-client/dns_config"
	"github.com/infobloxopen/bloxone-go-client/internal"
	openapiclient "github.com/infobloxopen/bloxone-go-client/keys"
	"github.com/stretchr/testify/require"
	"io"
	"net/http"
	"testing"
)

type RoundTripFunc func(req *http.Request) *http.Response

func (f RoundTripFunc) RoundTrip(req *http.Request) (*http.Response, error) {
	return f(req), nil
}

func NewTestClient(fn RoundTripFunc) *http.Client {
	return &http.Client{
		Transport: RoundTripFunc(fn),
	}
}

func Test_dns_config_AclAPIService(t *testing.T) {

	t.Run("Test AclAPIService AclCreate", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAcl := dns_config.ConfigACL{
			Comment: openapiclient.PtrString("This is a dummy ACL for testing."),
			Id:      openapiclient.PtrString("dummyAclId"),
			Name:    "dummyAclName",
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "POST", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/acl", req.URL.Path)
			require.Equal(t, "application/json", req.Header.Get("Content-Type"))

			var reqBody dns_config.ConfigACL
			require.NoError(t, json.NewDecoder(req.Body).Decode(&reqBody))
			require.Equal(t, dummyAcl, reqBody)

			response := dns_config.ConfigCreateACLResponse{
				Result: &dummyAcl,
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		aclAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		resp, httpRes, err := aclAPI.AclAPI.AclCreate(ctx).Body(dummyAcl).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AclAPIService AclRead", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAcl := dns_config.ConfigACL{
			Comment: openapiclient.PtrString("This is a dummy ACL for testing."),
			Id:      openapiclient.PtrString("dummyAclId"),
			Name:    "dummyAclName",
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "GET", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/acl/"+*dummyAcl.Id, req.URL.Path)

			response := dns_config.ConfigReadACLResponse{
				Result: &dummyAcl,
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		aclAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		readRequest := aclAPI.AclAPI.AclRead(ctx, *dummyAcl.Id)
		resp, httpRes, err := aclAPI.AclAPI.AclReadExecute(readRequest)
		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
		require.Equal(t, dummyAcl, *resp.Result)
	})

	t.Run("Test AclAPIService AclList", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAclList := []dns_config.ConfigACL{
			{
				Comment: openapiclient.PtrString("This is a dummy ACL for testing."),
				Id:      openapiclient.PtrString("dummyAclId1"),
				Name:    "dummyAclName1",
			},
			{
				Comment: openapiclient.PtrString("This is another dummy ACL for testing."),
				Id:      openapiclient.PtrString("dummyAclId2"),
				Name:    "dummyAclName2",
			},
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "GET", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/acl", req.URL.Path)

			response := dns_config.ConfigListACLResponse{
				Results: dummyAclList,
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		aclAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		resp, httpRes, err := aclAPI.AclAPI.AclList(ctx).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
		require.Equal(t, dummyAclList, resp.Results)
	})

	t.Run("Test AclAPIService AclUpdate", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAcl := dns_config.ConfigACL{
			Comment: openapiclient.PtrString("This is a dummy ACL for testing."),
			Id:      openapiclient.PtrString("dummyAclId"),
			Name:    "dummyAclName",
		}

		updatedAcl := dns_config.ConfigACL{
			Comment: openapiclient.PtrString("This is an updated dummy ACL for testing."),
			Id:      dummyAcl.Id,
			Name:    "updatedDummyAclName",
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "PATCH", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/acl/"+*dummyAcl.Id, req.URL.Path)

			response := dns_config.ConfigUpdateACLResponse{
				Result: &updatedAcl,
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		aclAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		updateRequest := aclAPI.AclAPI.AclUpdate(ctx, *dummyAcl.Id).Body(updatedAcl)
		resp, httpRes, err := updateRequest.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
		require.Equal(t, updatedAcl, *resp.Result)
	})

	t.Run("Test AclAPIService AclDelete", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAcl := dns_config.ConfigACL{
			Comment: openapiclient.PtrString("This is a dummy ACL for testing."),
			Id:      openapiclient.PtrString("dummyAclId"),
			Name:    "dummyAclName",
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "DELETE", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/acl/"+*dummyAcl.Id, req.URL.Path)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader([]byte{})),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		aclAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		httpRes, err := aclAPI.AclAPI.AclDelete(ctx, *dummyAcl.Id).Execute()
		require.Nil(t, err)
		require.Equal(t, 200, httpRes.StatusCode)
	})

}

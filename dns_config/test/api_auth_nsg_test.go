/*
DNS Configuration API

Testing AclAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dns_config_test

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/infobloxopen/bloxone-go-client/dns_config"
	"github.com/infobloxopen/bloxone-go-client/internal"
	openapiclient "github.com/infobloxopen/bloxone-go-client/keys"
	"github.com/stretchr/testify/require"
	"io"
	"net/http"
	"testing"
)

func Test_dns_config_AuthNsgAPIService(t *testing.T) {

	t.Run("Test AuthNesAPIService AuthNesCreate", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAuthNsg := dns_config.ConfigAuthNSG{
			Comment: openapiclient.PtrString("This is a dummy AuthNes for testing."),
			Id:      openapiclient.PtrString("dummyAuthNesId"),
			Name:    "dummyAuthNesName",
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "POST", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/auth_nsg", req.URL.Path)

			response := dns_config.ConfigCreateAuthNSGResponse{
				Result: &dummyAuthNsg,
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		authNesAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		createRequest := authNesAPI.AuthNsgAPI.AuthNsgCreate(ctx).Body(dummyAuthNsg)
		resp, httpRes, err := createRequest.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
		require.Equal(t, dummyAuthNsg, *resp.Result)
	})

	t.Run("Test AuthNsgAPIService AuthNsgRead", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAuthNsg := dns_config.ConfigAuthNSG{
			Comment: openapiclient.PtrString("This is a dummy AuthNsg for testing."),
			Id:      openapiclient.PtrString("dummyAuthNsgId"),
			Name:    "dummyAuthNsgName",
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "GET", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/auth_nsg/"+*dummyAuthNsg.Id, req.URL.Path)

			response := dns_config.ConfigReadAuthNSGResponse{
				Result: &dummyAuthNsg,
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		authNsgAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		readRequest := authNsgAPI.AuthNsgAPI.AuthNsgRead(ctx, *dummyAuthNsg.Id)
		resp, httpRes, err := readRequest.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
		require.Equal(t, dummyAuthNsg, *resp.Result)
	})

	t.Run("Test AuthNsgAPIService AuthNsgUpdate", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAuthNsg := dns_config.ConfigAuthNSG{
			Comment: openapiclient.PtrString("This is a dummy AuthNsg for testing."),
			Id:      openapiclient.PtrString("dummyAuthNsgId"),
			Name:    "dummyAuthNsgName",
		}

		updatedAuthNsg := dns_config.ConfigAuthNSG{
			Comment: openapiclient.PtrString("This is an updated dummy AuthNsg for testing."),
			Id:      dummyAuthNsg.Id,
			Name:    "updatedDummyAuthNsgName",
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "PATCH", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/auth_nsg/"+*dummyAuthNsg.Id, req.URL.Path)

			response := dns_config.ConfigUpdateAuthNSGResponse{
				Result: &updatedAuthNsg,
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		authNsgAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		updateRequest := authNsgAPI.AuthNsgAPI.AuthNsgUpdate(ctx, *dummyAuthNsg.Id).Body(updatedAuthNsg)
		resp, httpRes, err := updateRequest.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
		require.Equal(t, updatedAuthNsg, *resp.Result)
	})

	t.Run("Test AuthNsgAPIService AuthNsgList", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAuthNsgList := []dns_config.ConfigAuthNSG{
			{
				Comment: openapiclient.PtrString("This is a dummy AuthNsg for testing."),
				Id:      openapiclient.PtrString("dummyAuthNsgId1"),
				Name:    "dummyAuthNsgName1",
			},
			{
				Comment: openapiclient.PtrString("This is another dummy AuthNsg for testing."),
				Id:      openapiclient.PtrString("dummyAuthNsgId2"),
				Name:    "dummyAuthNsgName2",
			},
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "GET", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/auth_nsg", req.URL.Path)

			response := dns_config.ConfigListAuthNSGResponse{
				Results: dummyAuthNsgList,
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		authNsgAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		listRequest := authNsgAPI.AuthNsgAPI.AuthNsgList(ctx)
		resp, httpRes, err := listRequest.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
		require.Equal(t, dummyAuthNsgList, resp.Results)
	})

	t.Run("Test AuthNsgAPIService AuthNsgDelete", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		dummyAuthNsg := dns_config.ConfigAuthNSG{
			Comment: openapiclient.PtrString("This is a dummy AuthNsg for testing."),
			Id:      openapiclient.PtrString("dummyAuthNsgId"),
			Name:    "dummyAuthNsgName",
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "DELETE", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/auth_nsg/"+*dummyAuthNsg.Id, req.URL.Path)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader([]byte{})),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		authNsgAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		deleteRequest := authNsgAPI.AuthNsgAPI.AuthNsgDelete(ctx, *dummyAuthNsg.Id)
		httpRes, err := deleteRequest.Execute()
		require.Nil(t, err)
		require.Equal(t, 200, httpRes.StatusCode)
	})

}

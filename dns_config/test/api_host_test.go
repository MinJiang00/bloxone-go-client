/*
DNS Configuration API

Testing AclAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dns_config_test

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/infobloxopen/bloxone-go-client/dns_config"
	"github.com/infobloxopen/bloxone-go-client/internal"
	openapiclient "github.com/infobloxopen/bloxone-go-client/keys"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"io"
	"net/http"
	"testing"
)

func Test_dns_config_HostAPIService(t *testing.T) {

	t.Run("Test HostAPIService HostList", func(t *testing.T) {

		// Create a mock HTTP client
		testClient := NewTestClient(func(req *http.Request) *http.Response {
			// Check the request parameters
			require.Equal(t, "GET", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/host", req.URL.Path)
			require.Equal(t, "application/json", req.Header.Get("Accept"))

			// Create a dummy response
			response := dns_config.ConfigListHostResponse{
				Results: []dns_config.ConfigHost{
					{
						Id:           openapiclient.PtrString("host1"),
						AbsoluteName: openapiclient.PtrString("host1.example.com"),
					},
					{
						Id:           openapiclient.PtrString("host2"),
						AbsoluteName: openapiclient.PtrString("host2.example.com"),
					},
				},
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			// Return the dummy response
			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		// Create a new API client with the mock HTTP client
		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient
		apiClient := dns_config.NewAPIClient(configuration)

		// Call the method and check the response
		resp, httpRes, err := apiClient.HostAPI.HostList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "host1", *resp.Results[0].Id)
		assert.Equal(t, "host1.example.com", *resp.Results[0].AbsoluteName)
		assert.Equal(t, "host2", *resp.Results[1].Id)
		assert.Equal(t, "host2.example.com", *resp.Results[1].AbsoluteName)

	})

	t.Run("Test HostAPIService HostRead", func(t *testing.T) {

		// Create a mock HTTP client
		testClient := NewTestClient(func(req *http.Request) *http.Response {
			// Check the request parameters
			require.Equal(t, "GET", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/host/host1", req.URL.Path)
			require.Equal(t, "application/json", req.Header.Get("Accept"))

			// Create a dummy response
			response := dns_config.ConfigReadHostResponse{
				Result: &dns_config.ConfigHost{
					Id:           openapiclient.PtrString("host1"),
					AbsoluteName: openapiclient.PtrString("host1.example.com"),
				},
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			// Return the dummy response
			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		// Create a new API client with the mock HTTP client
		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient
		apiClient := dns_config.NewAPIClient(configuration)

		// Call the method and check the response
		id := "host1"
		resp, httpRes, err := apiClient.HostAPI.HostRead(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "host1", *resp.Result.Id)
		assert.Equal(t, "host1.example.com", *resp.Result.AbsoluteName)

	})

	t.Run("Test HostAPIService HostUpdate", func(t *testing.T) {

		// Create a mock HTTP client
		testClient := NewTestClient(func(req *http.Request) *http.Response {
			// Check the request parameters
			require.Equal(t, "PATCH", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/host/host1", req.URL.Path)
			require.Equal(t, "application/json", req.Header.Get("Accept"))

			// Create a dummy response
			response := dns_config.ConfigReadHostResponse{
				Result: &dns_config.ConfigHost{
					Id:           openapiclient.PtrString("host1"),
					AbsoluteName: openapiclient.PtrString("host1.example.com"),
				},
			}
			body, err := json.Marshal(response)
			require.NoError(t, err)

			// Return the dummy response
			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader(body)),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		// Create a new API client with the mock HTTP client
		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient
		apiClient := dns_config.NewAPIClient(configuration)

		// Call the method and check the response
		id := "host1"
		hostUpdateInput := dns_config.ConfigHost{
			AbsoluteName: openapiclient.PtrString("host1.example.com"),
		}
		resp, httpRes, err := apiClient.HostAPI.HostUpdate(context.Background(), id).Body(hostUpdateInput).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "host1", *resp.Result.Id)
		assert.Equal(t, "host1.example.com", *resp.Result.AbsoluteName)

	})

}

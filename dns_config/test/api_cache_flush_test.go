/*
DNS Configuration API

Testing AclAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dns_config_test

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/infobloxopen/bloxone-go-client/dns_config"
	"github.com/infobloxopen/bloxone-go-client/internal"
	openapiclient "github.com/infobloxopen/bloxone-go-client/keys"
	"github.com/stretchr/testify/require"
	"io"
	"net/http"
	"testing"
)

func Test_dns_config_CacheFlushAPIService(t *testing.T) {

	t.Run("Test CacheFlushAPIService CacheFlushCreate", func(t *testing.T) {
		// Create a dummy CacheFlush object
		dummyCacheFlush := dns_config.ConfigCacheFlush{
			FlushSubdomains: openapiclient.PtrBool(true),
			Fqdn:            openapiclient.PtrString("dummyFqdn"),
			Ophid:           openapiclient.PtrString("dummyOphid"),
			ServiceId:       openapiclient.PtrString("dummyServiceId"),
			Ttl:             openapiclient.PtrInt64(120),
			ViewName:        openapiclient.PtrString("dummyViewName"),
		}

		testClient := NewTestClient(func(req *http.Request) *http.Response {
			require.Equal(t, "POST", req.Method)
			require.Equal(t, "/api/ddi/v1/dns/cache_flush", req.URL.Path)
			require.Equal(t, "application/json", req.Header.Get("Content-Type"))

			var reqBody dns_config.ConfigCacheFlush
			require.NoError(t, json.NewDecoder(req.Body).Decode(&reqBody))
			require.Equal(t, dummyCacheFlush, reqBody)

			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewReader([]byte{})),
				Header:     map[string][]string{"Content-Type": {"application/json"}},
			}
		})

		configuration := internal.NewConfiguration()
		configuration.HTTPClient = testClient

		cacheFlushAPI := dns_config.NewAPIClient(configuration)
		ctx := context.Background()

		_, httpRes, err := cacheFlushAPI.CacheFlushAPI.CacheFlushCreate(ctx).Body(dummyCacheFlush).Execute()
		require.Nil(t, err)
		//require.NotNil(t, resp)
		require.Equal(t, 200, httpRes.StatusCode)
	})
}

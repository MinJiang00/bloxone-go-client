/*
DDI Keys API

Testing TsigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keys_test

import (
	"context"
	"github.com/infobloxopen/bloxone-go-client/client"
	openapiclient "github.com/infobloxopen/bloxone-go-client/keys"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"net/http"
	"strings"
	"testing"
)

func Test_keys_TsigAPIService(t *testing.T) {
	rq := require.New(t)
	c, err := client.NewAPIClient(client.Configuration{ClientName: "test"})
	rq.NoError(err)
	apiClient := c.KeysAPI
	dummyKey := openapiclient.KeysTSIGKey{
		Algorithm:    openapiclient.PtrString("hmac_sha256"),
		Comment:      nil, // or use: String("This is a comment")
		CreatedAt:    nil, // or use: Time(time.Now())
		Id:           nil, //openapiclient.PtrString("123"),
		Name:         "dummyKey36",
		ProtocolName: nil, // or use: String("protocolName")
		Secret:       "XOJvQkcX6Og0CHFg+rQ27pqAB+EhSjVoI4Bs/JWegBc=",
		Tags:         nil, //make(map[string]interface{}),
		UpdatedAt:    nil, // or use: Time(time.Now())
	}
	var createResp *openapiclient.KeysCreateTSIGKeyResponse // replace with the actual type of resp
	var httpRes *http.Response

	t.Run("Test TsigAPIService TsigCreate", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		ctx := context.Background()
		req := apiClient.TsigAPI.TsigCreate(ctx)
		req = req.Body(dummyKey)
		createResp, httpRes, err = req.Execute()
		require.Nil(t, err)
		require.NotNil(t, createResp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TsigAPIService TsigList", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test
		req := apiClient.TsigAPI.TsigList(context.Background()).Fields("name")
		resp, httpRes, err := req.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TsigAPIService TsigRead", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		var id string
		id = *createResp.GetResult().Id
		lastSlash := strings.LastIndex(id, "/")
		uuid := string(id[lastSlash+1:])

		req := apiClient.TsigAPI.TsigRead(context.Background(), uuid)
		req.Fields("name")
		resp, httpRes, err := req.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TsigAPIService TsigUpdate", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		var id string
		id = *createResp.GetResult().Id
		lastSlash := strings.LastIndex(id, "/")
		uuid := id[lastSlash+1:]
		req := apiClient.TsigAPI.TsigUpdate(context.Background(), uuid).Body(dummyKey)

		resp, httpRes, err := req.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TsigAPIService TsigDelete", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		var id = *createResp.GetResult().Id
		lastSlash := strings.LastIndex(id, "/")
		uuid := string(id[lastSlash+1:])
		httpRes, err := apiClient.TsigAPI.TsigDelete(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
